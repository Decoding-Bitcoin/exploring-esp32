use std::thread;
use std::time::Duration;
use std::str::FromStr;

use anyhow::{
    bail,
    Result,
};

use esp_idf_svc::hal::{
    delay::Ets,
    gpio::*,
    peripherals::Peripherals,
    peripheral,
    spi::*,
    spi::config::*,
    units::FromValueType,
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    wifi::*,
};
use display_interface_spi::SPIInterface;
use mipidsi::{
    Builder,
    models::ST7789,
    options::*,
};
use embedded_graphics::{
    prelude::*,
    pixelcolor::*,
    text::*,
    mono_font::{ascii::FONT_10X20, MonoTextStyle},
};

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[derive(Debug)]
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    log::info!("Running from main!");

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;
    log::info!("Loaded config file: {CONFIG:?}");

    let peripherals = Peripherals::take().unwrap();
    let spi = peripherals.spi2;

    let mut delay = Ets;

    // TODO: turn display initialization into a separate function.
    let rst = PinDriver::input_output_od(peripherals.pins.gpio23).unwrap();
    let dc = PinDriver::input_output_od(peripherals.pins.gpio16).unwrap();
    let mut backlight = PinDriver::output(peripherals.pins.gpio4).unwrap();
    let sclk = peripherals.pins.gpio18;
    let sdo = peripherals.pins.gpio19;
    let cs = peripherals.pins.gpio5;

    let spi_driver = SpiDriver::new(
        spi,
        sclk,
        sdo,
        None::<AnyIOPin>,
        &DriverConfig::new().dma(Dma::Channel1(240 * 135)),
    ).unwrap();

    let spi_device_driver = SpiDeviceDriver::new(
        spi_driver,
        Some(cs),
        &esp_idf_svc::hal::spi::config::Config::new()
            .baudrate(26.MHz().into())
            .data_mode(MODE_3)
    ).unwrap();

    let spi_interface = SPIInterface::new(spi_device_driver, dc);
    let mut display = Builder::new(ST7789, spi_interface)
        .display_size(135, 240)
        .display_offset(
            52, // Move image up
            40  // Move image right
        )
        .orientation(Orientation::new().rotate(Rotation::Deg90))
        .invert_colors(ColorInversion::Inverted)
        .reset_pin(rst)
        .init(&mut delay).unwrap();

    backlight.set_high().unwrap();

    log::info!("Display initialized.");

    // Draw centered text.
    display.clear(Rgb565::BLACK).unwrap();
    let character_style = MonoTextStyle::new(&FONT_10X20, Rgb565::WHITE);
    let text = "Oi, Milena.";
    Text::with_alignment(
        text,
        display.bounding_box().center(),// + Point::new(0, 15),
        character_style,
        Alignment::Center,
    ).draw(&mut display).unwrap();

    let sysloop = EspSystemEventLoop::take().unwrap();
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {err:?}")
        }
    };

    log::info!("Connected to Wi-Fi network.");

    display.clear(Rgb565::BLACK).unwrap();
    let text = "Connected to Wi-Fi";
    Text::with_alignment(
        text,
        display.bounding_box().center(),// + Point::new(0, 15),
        character_style,
        Alignment::Center,
    ).draw(&mut display).unwrap();


    loop {
        thread::sleep(Duration::from_millis(1000));
    }

}


pub fn wifi(
    ssid: &str,
    pass: &str,
    modem: impl peripheral::Peripheral<P = esp_idf_svc::hal::modem::Modem> + 'static,
    sysloop: EspSystemEventLoop,
) -> Result<Box<EspWifi<'static>>> {
    let mut auth_method = AuthMethod::WPA2Personal;
    if ssid.is_empty() {
        bail!("Missing WiFi name");
    }
    if pass.is_empty() {
        auth_method = AuthMethod::None;
        log::info!("Wifi password is empty");
    }
    let mut esp_wifi = EspWifi::new(modem, sysloop.clone(), None)?;

    let mut wifi = BlockingWifi::wrap(&mut esp_wifi, sysloop)?;

    wifi.set_configuration(&Configuration::Client(ClientConfiguration::default()))?;

    log::info!("Starting wifi...");

    wifi.start()?;

    log::info!("Scanning...");

    let ap_infos = wifi.scan()?;

    let ours = ap_infos.into_iter().find(|a| a.ssid == ssid);

    let channel = if let Some(ours) = ours {
        log::info!(
            "Found configured access point {} on channel {}",
            ssid, ours.channel
        );
        Some(ours.channel)
    } else {
        log::info!(
            "Configured access point {} not found during scanning, will go with unknown channel",
            ssid
        );
        None
    };

    wifi.set_configuration(&Configuration::Client(ClientConfiguration {
        ssid: heapless::String::<32>::from_str(ssid).unwrap(),
        password: heapless::String::<64>::from_str(pass).unwrap(),
        channel,
        auth_method,
        ..Default::default()
    }))?;

    log::info!("Connecting wifi...");

    wifi.connect()?;

    log::info!("Waiting for DHCP lease...");

    wifi.wait_netif_up()?;

    let ip_info = wifi.wifi().sta_netif().get_ip_info()?;

    log::info!("Wifi DHCP info: {:?}", ip_info);

    Ok(Box::new(esp_wifi))
}
